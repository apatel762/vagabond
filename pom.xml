<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>3.4.5</version>
    <relativePath/>
    <!-- lookup parent from repository -->
  </parent>
  <groupId>com.aspatel</groupId>
  <artifactId>vagabond</artifactId>
  <version>${revision}</version>
  <name>Vagabond</name>
  <description>An idea for an infinite game to pass the time with</description>
  <properties>
    <!-- A CI-friendly version number property which is overridden at build time by the CI/CD scripts.
		https://maven.apache.org/guides/mini/guide-maven-ci-friendly.html -->
    <revision>1.0.0-SNAPSHOT</revision>
    <!-- Java -->
    <java.version>21</java.version>
    <!-- Dependencies -->
    <spotless-maven-plugin.version>2.44.4</spotless-maven-plugin.version>
    <google-java-format.version>1.26.0</google-java-format.version>
    <jacoco-maven-plugin.version>0.8.13</jacoco-maven-plugin.version>
    <flatten-maven-plugin.version>1.7.0</flatten-maven-plugin.version>
    <archunit.version>1.4.0</archunit.version>
    <jte.version>3.2.1</jte.version>
    <!-- Minimum line coverage percentage for unit tests -->
    <jacoco-maven-plugin.minimum-coverage>0.90</jacoco-maven-plugin.minimum-coverage>
  </properties>
  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>gg.jte</groupId>
      <artifactId>jte-spring-boot-starter-3</artifactId>
      <version>${jte.version}</version>
    </dependency>
    <dependency>
      <groupId>gg.jte</groupId>
      <artifactId>jte-models</artifactId>
      <version>${jte.version}</version>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
    </dependency>
    <!-- TEST -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.tngtech.archunit</groupId>
      <artifactId>archunit-junit5</artifactId>
      <version>${archunit.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <annotationProcessorPaths>
            <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
            </path>
          </annotationProcessorPaths>
        </configuration>
      </plugin>
      <!-- LIFECYCLE REFERENCE:
       https://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Lifecycle_Reference -->
      <!-- pre-clean
      "execute processes needed prior to the actual project cleaning" -->
      <!-- clean
      "remove all files generated by the previous build" -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>flatten-maven-plugin</artifactId>
        <version>${flatten-maven-plugin.version}</version>
        <configuration>
          <updatePomFile>true</updatePomFile>
          <flattenMode>resolveCiFriendliesOnly</flattenMode>
        </configuration>
        <executions>
          <execution>
            <id>clean-flattened-files</id>
            <goals>
              <goal>clean</goal>
            </goals>
            <phase>clean</phase>
          </execution>
          <execution>
            <id>generate-flattened-resources</id>
            <goals>
              <goal>flatten</goal>
            </goals>
            <phase>process-resources</phase>
          </execution>
        </executions>
      </plugin>
      <!-- post-clean
      "execute processes needed to finalize the project cleaning" -->
      <!-- validate
      "validate the project is correct and all necessary information is available." -->
      <!-- initialize
      "initialize build state, e.g. set properties or create directories." -->
      <!-- generate-sources
      "generate any source code for inclusion in compilation." -->
      <plugin>
        <groupId>gg.jte</groupId>
        <artifactId>jte-maven-plugin</artifactId>
        <version>${jte.version}</version>
        <dependencies>
          <dependency>
            <groupId>gg.jte</groupId>
            <artifactId>jte-models</artifactId>
            <version>${jte.version}</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>generate-template-code</id>
            <goals>
              <goal>generate</goal>
            </goals>
            <phase>generate-sources</phase>
            <configuration>
              <sourceDirectory>${project.basedir}/src/main/jte</sourceDirectory>
              <contentType>Html</contentType>
              <binaryStaticContent>true</binaryStaticContent>
              <targetResourceDirectory>${project.build.outputDirectory}</targetResourceDirectory>
              <extensions>
                <extension>
                  <className>gg.jte.models.generator.ModelExtension</className>
                </extension>
              </extensions>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- process-sources
      "process the source code, for example to filter any values." -->
      <plugin>
        <groupId>com.diffplug.spotless</groupId>
        <artifactId>spotless-maven-plugin</artifactId>
        <version>${spotless-maven-plugin.version}</version>
        <configuration>
          <pom>
            <sortPom>
              <expandEmptyElements>false</expandEmptyElements>
              <keepBlankLines>false</keepBlankLines>
              <endWithNewline>true</endWithNewline>
            </sortPom>
          </pom>
          <java>
            <removeUnusedImports/>
            <googleJavaFormat>
              <version>${google-java-format.version}</version>
              <style>GOOGLE</style>
              <reflowLongStrings>true</reflowLongStrings>
              <formatJavadoc>true</formatJavadoc>
            </googleJavaFormat>
          </java>
        </configuration>
        <executions>
          <execution>
            <id>check-code-formatting</id>
            <goals>
              <goal>check</goal>
            </goals>
            <phase>process-sources</phase>
          </execution>
        </executions>
      </plugin>
      <!-- generate-resources
      "generate resources for inclusion in the package." -->
      <!-- process-resources
      "copy and process the resources into the destination directory, ready for packaging." -->
      <!-- compile
      "compile the source code of the project." -->
      <!-- process-classes
      "post-process the generated files from compilation, for example to do bytecode enhancement on Java classes." -->
      <!-- generate-test-sources
      "generate any test source code for inclusion in compilation." -->
      <!-- process-test-sources
      "process the test source code, for example to filter any values." -->
      <!-- generate-test-resources
      "create resources for testing." -->
      <!-- process-test-resources
      "copy and process the resources into the test destination directory." -->
      <!-- test-compile
      "compile the test source code into the test destination directory" -->
      <!-- process-test-classes
      "post-process the generated files from test compilation, for example to do bytecode enhancement on Java classes." -->
      <!-- test
      "run tests using a suitable unit testing framework. These tests should not require the code be packaged or deployed." -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <argLine>@{argLine}
            -javaagent:${settings.localRepository}/org/mockito/mockito-core/${mockito.version}/mockito-core-${mockito.version}.jar
            -Xshare:off</argLine>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${jacoco-maven-plugin.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <id>report</id>
            <goals>
              <goal>report</goal>
            </goals>
            <phase>test</phase>
          </execution>
          <execution>
            <id>jacoco-check</id>
            <goals>
              <goal>check</goal>
            </goals>
            <phase>test</phase>
            <configuration>
              <rules>
                <rule>
                  <element>PACKAGE</element>
                  <limits>
                    <limit>
                      <counter>LINE</counter>
                      <value>COVEREDRATIO</value>
                      <minimum>${jacoco-maven-plugin.minimum-coverage}</minimum>
                    </limit>
                  </limits>
                </rule>
              </rules>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- prepare-package
      "perform any operations necessary to prepare a package before the actual packaging. This often results in an unpacked, processed version of the package." -->
      <!-- package
      "take the compiled code and package it in its distributable format, such as a JAR." -->
      <!-- pre-integration-test
      "perform actions required before integration tests are executed. This may involve things such as setting up the required environment." -->
      <!-- integration-test
      "process and deploy the package if necessary into an environment where integration tests can be run." -->
      <!-- post-integration-test
      "perform actions required after integration tests have been executed. This may including cleaning up the environment." -->
      <!-- verify
      "run any checks to verify the package is valid and meets quality criteria." -->
      <!-- install
      "install the package into the local repository, for use as a dependency in other projects locally." -->
      <!-- deploy
      "done in an integration or release environment, copies the final package to the remote repository for sharing with other developers and projects." -->
    </plugins>
  </build>
</project>
